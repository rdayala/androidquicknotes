// Custom GridView to hold images

public class GridViewAdapter extends ArrayAdapter<MovieDataItem> {

    private Context mContext;
    private int layoutResourceId;
    private ArrayList<MovieDataItem> mGridData = new ArrayList<MovieDataItem>();

    public GridViewAdapter(Context mContext, int layoutResourceId, ArrayList<MovieDataItem> mGridData) {
        super(mContext, layoutResourceId, mGridData);
        this.layoutResourceId = layoutResourceId;
        this.mContext = mContext;
        this.mGridData = mGridData;
    }


    /**
     * Updates grid data and refresh grid items.
     * @param mGridData
     */
    public void setGridData(ArrayList<MovieDataItem> mGridData) {
        this.mGridData = mGridData;
        notifyDataSetChanged();
    }

    @Override
    public View getView(int position, View convertView, ViewGroup parent) {
        View row = convertView;
        ViewHolder holder;

        if (row == null) {
            LayoutInflater inflater = ((Activity) mContext).getLayoutInflater();
            row = inflater.inflate(layoutResourceId, parent, false);
            holder = new ViewHolder();
            holder.imageView = (ImageView) row.findViewById(R.id.movie_poster_grid_item);
            row.setTag(holder);
        } else {
            holder = (ViewHolder) row.getTag();
        }

        MovieDataItem movieDataItem = mGridData.get(position);
        Picasso.with(mContext).load(movieDataItem.getMoviePosterPathUrl()).into(holder.imageView);
        return row;
    }

    // Using ViewHolder pattern
    static class ViewHolder {
        ImageView imageView;
    }
}


// Setting up GridView adapter

@Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {

        //Initialize with empty data
        mGridData = new ArrayList<>();

        // The Adapter will take data from a source and
        // use it to populate the GridView it's attached to.
        mGridAdapter = new GridViewAdapter(
                            getActivity(), // The current context (this activity)
                            R.layout.movie_poster_grid_item, // The name of the layout ID. This is the layout that actually defines grid view items.
                            mGridData); // The data to represent in the GridView

        View rootView = inflater.inflate(R.layout.movie_posters_fragment, container, false);

        // Get a reference to the GridView, and attach this adapter to it.
        mGridView = (GridView)rootView.findViewById(R.id.movie_posters_grid);
        mGridView.setAdapter(mGridAdapter);

        // On Click event for Gridview Item
        mGridView.setOnItemClickListener(new AdapterView.OnItemClickListener() {

            @Override
            public void onItemClick(AdapterView<?> parent, View v, int position, long id) {
                Fragment movieDetailsFragment = getActivity().getSupportFragmentManager()
                        .findFragmentById(R.id.movieDetailsFragment);

                // passing array index
                MovieDataItem item = mGridData.get(position);

                if (movieDetailsFragment != null && movieDetailsFragment.isVisible()) {
                    ((MoviesFragmentCoordinator)getActivity()).onMoviePosterSelected(item);
                }
                else {
                    Intent movieDetailIntent = new Intent(getActivity(), MovieDetailsActivity.class);
                    movieDetailIntent.putExtra(getString(R.string.movie_id), item.getMovieId());
                    movieDetailIntent.putExtra(getString(R.string.movie_poster_url), item.getMoviePosterPathUrl());
                    movieDetailIntent.putExtra(getString(R.string.movie_original_title), item.getOriginalTitle());
                    movieDetailIntent.putExtra(getString(R.string.movie_overview), item.getOverview());
                    movieDetailIntent.putExtra(getString(R.string.movie_vote_average), item.getVote_average());
                    movieDetailIntent.putExtra(getString(R.string.movie_release_date), item.getReleaseDate());
                    startActivity(movieDetailIntent);
                }
            }
        });

        if(savedInstanceState != null) {
            moviesJsonData = savedInstanceState.getString(getString(R.string.movie_saved_json_data));
        }

        return rootView;
    }
