
https://www.google.com/design/spec/patterns/settings.html

http://developer.android.com/guide/topics/ui/settings.html

http://developer.android.com/reference/android/content/SharedPreferences.html

Once the user changes the setting, it gets saved in the default 'SharedPreferences' file.

this stores a bunch of key-value pairs of primitive data.

[NOTE] ********
You can also use SharedPreferencese outside the context of settings as well. 

Gingerbread devices - use PreferenceActivity class

Honeycomb or later - use PreferenceFragment

Appcompat only adds an action bar to activities that derive from ActionBarActivity and 
SettingsActivity does not subclass ActionBarActivity. SettingsActivity is a subclass of PreferenceActivity.

So why are we using PreferenceActivity? Itâ€™s an easy way to get the preference UI working on Gingerbread devices.

Example:

/**
 * A {@link PreferenceActivity} that presents a set of application settings.
 * <p>
 * See <a href="http://developer.android.com/design/patterns/settings.html">
 * Android Design: Settings</a> for design guidelines and the <a
 * href="http://developer.android.com/guide/topics/ui/settings.html">Settings
 * API Guide</a> for more information on developing a Settings UI.
 */
public class SettingsActivity extends PreferenceActivity
        implements Preference.OnPreferenceChangeListener {
 
    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        // Add 'general' preferences, defined in the XML file
         // TODO: Add preferences from XML
 
        // For all preferences, attach an OnPreferenceChangeListener so the UI summary can be
        // updated when the preference changes.
        // TODO: Add preferences
    }
 
    /**
     * Attaches a listener so the summary is always updated with the preference value.
     * Also fires the listener once, to initialize the summary (so it shows up before the value
     * is changed.)
     */
    private void bindPreferenceSummaryToValue(Preference preference) {
        // Set the listener to watch for value changes.
        preference.setOnPreferenceChangeListener(this);
 
        // Trigger the listener immediately with the preference's
        // current value.
        onPreferenceChange(preference,
                PreferenceManager
                        .getDefaultSharedPreferences(preference.getContext())
                        .getString(preference.getKey(), ""));
    }
 
    @Override
    public boolean onPreferenceChange(Preference preference, Object value) {
        String stringValue = value.toString();
 
        if (preference instanceof ListPreference) {
            // For list preferences, look up the correct display value in
            // the preference's 'entries' list (since they have separate labels/values).
            ListPreference listPreference = (ListPreference) preference;
            int prefIndex = listPreference.findIndexOfValue(stringValue);
            if (prefIndex >= 0) {
                preference.setSummary(listPreference.getEntries()[prefIndex]);
            }
        } else {
            // For other preferences, set the summary to the value's simple string representation.
            preference.setSummary(stringValue);
        }
        return true;
    }
 
}
